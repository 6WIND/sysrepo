/**
 * @file sysreo.proto
 * @author Rastislav Szabo <raszabo@cisco.com>, Lukas Macko <lmacko@cisco.com>
 * @brief Definition of sysrepo GPB messages used as the API for the
 * communication between sysrepo engine and sysrepo client library.
 *
 * @copyright
 * Copyright 2016 Cisco Systems, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax="proto2";
package sr;

/**
 * @brief Value of an item stored (or to be stored) in the datastore.
 * Can be mapped to sr_val_t data structure from sysrepo library API.
 */
message Value {
  enum Types {
    LIST = 1;
    CONTAINER = 2;
    CONTAINER_PRESENCE = 3;
    LEAF_EMPTY = 4;

    BINARY = 10;
    BITS = 11;
    BOOL = 12;
    DECIMAL64 = 13;
    ENUM = 14;
    IDENTITYREF = 15;
    INSTANCEID = 16;
    INT8 = 17;
    INT16 = 18;
    INT32 = 19;
    INT64 = 20;
    LEAFREF = 21;
    STRING = 22;
    UINT8 = 23;
    UINT16 = 24;
    UINT32 = 25;
    UINT64 = 26;
  }

  required string path = 1;
  required Types type = 2;

  optional string binary_val = 10;
  optional string bits_val = 11;
  optional bool bool_val = 12;
  optional double decimal64_val = 13;
  optional string enum_val = 14;
  optional string identityref_val = 15;
  optional string instanceid_val = 16;
  optional int32 int8_val = 17;
  optional int32 int16_val = 18;
  optional int32 int32_val = 19;
  optional int64 int64_val = 20;
  optional string leafref_val = 21;
  optional string string_val = 22;
  optional uint32 uint8_val = 23;
  optional uint32 uint16_val = 24;
  optional uint32 uint32_val = 25;
  optional uint64 uint64_val = 26;
}

message Error {
  optional string message = 1;
  optional string path = 2;
}

////////////////////////////////////////////////////////////////////////////////
// Connection / Session Management
////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Datastore on which the configuration session will operate.
 */
enum DataStore {
  STARTUP = 1;
  RUNNING = 2;
}

/**
 * @brief Request for starting a session. Sent by sr_session_start API call.
 */
message SessionStartReq {
  required DataStore datastore = 1;
  optional string user_name = 2;

}

/**
 * @brief Response to session_start request.
 */
message SessionStartResp {
  required uint32 session_id = 1;
}

/**
 * @brief Request for stopping the session. Sent by sr_session_stop API call.
 */
message SessionStopReq {
  required uint32 session_id = 1;
}

/**
 * @brief Response to session_stop request.
 */
message SessionStopResp {
  required uint32 session_id = 1;
}

/**
 * @brief Refreshes configuration data cached within the session.
 * Sent by sr_session_data_refresh API call.
 */
message SessionRefreshReq {
}

/**
 * @brief Response to sr_session_data_refresh request.
 */
message SessionRefreshResp {
}

////////////////////////////////////////////////////////////////////////////////
// Data Retrieval API (get / get-config functionality)
////////////////////////////////////////////////////////////////////////////////

message Schema_rev {
  optional string revision = 1;         /**< Latest revision date of the module. */
  optional string file_path_yang = 2;   /**< Absolute path to file where the schema is stored (YANG format). */
  optional string file_path_yin  = 3;   /**< Absolute path to file where the schema is stored (.yin format). */
}

message Schema_submodule {
  required string submodule_name = 1;   /**< Submodule name */
  required Schema_rev revision = 2;     /**< Revision of the submodule */
}
/**
 * @brief Information about a schema installed in sysrepo datastore.
 */
message Schema {
  required string module_name = 1;           /**< Name of the module. */
  required string ns = 2;                    /**< Namespace of the module. */
  required string prefix = 3;                /**< Prefix of he module. */

  required Schema_rev revision = 4;          /**< Revision of the module*/
  repeated Schema_submodule submodules = 5;  /**< Submodules */
}

/**
 * @brief Retrieves an array of schemas installed in the sysrepo datastore.
 * Sent by sr_list_schemas API call.
 */
message ListSchemasReq {
}

/**
 * @brief Response to sr_list_schemas request.
 */
message ListSchemasResp {
  repeated Schema schemas = 1;
}

/**
 * @brief Retrieves the content of specified schema file.
 * Sent by sr_get_schema API call.
 */
message GetSchemaReq {
  required string module_name = 1;
  optional string revision = 2;
  optional string submodule_name = 3;
  required bool yang_format = 4;
}

/**
 * @brief Response to sr_get_schema request.
 */
message GetSchemaResp {
  required string schema_content = 1;
}

/**
 * @brief Retrieves a single data element stored under provided path.
 * Sent by sr_get_item API call.
 */
message GetItemReq {
  required string path = 1;
}

/**
 * @brief Response to get_item request.
 */
message GetItemResp {
  optional Value value = 1;
}

/**
 * @brief Retrieves an array of data elements stored under provided path.
 * Sent by sr_get_items and sr_get_items_iter API calls.
 */
message GetItemsReq {
  required string path = 1;

  /*
   * The options below are applicable only for sr_get_items_iter
   * (not set by sr_get_items).
   */
  optional bool recursive = 2;
  optional uint32 limit = 3;
  optional uint32 offset = 4;
}

/**
 * @brief Response to get_items / sr_get_items_iter request.
 */
message GetItemsResp {
  repeated Value values = 1;
}

////////////////////////////////////////////////////////////////////////////////
// Data Manipulation API (edit-config functionality) - !!! EXPERIMENTAL !!!
////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Flags used to override default behavior of data manipulation calls.
 */
enum EditFlags {
  DEFAULT = 0x00;        /**< Default behavior - recursive and non-strict. */
  NON_RECURSIVE = 0x01;  /**< Non-recursive behavior:
                              by ::SetItemReq, all preceding nodes (parents) of the identified element must exist,
                              by ::DeleteItemReq xpath must not identify an non-empty list or non-empty container. */
  STRICT = 0x02;         /**< Strict behavior:
                              by ::SetItemReq the identified element must not exist (similar to netconf create operation),
                              by ::DeleteItemReq the identified element must exist (similar to netconf delete operation). */
}

/**
 * @brief Sets the value of the leaf, leaf-list or presence container.
 * Sent by sr_set_item API call.
 */
message SetItemReq {
  required string path = 1;
  optional Value value = 2;
  required uint32 options = 3;  /**< Bitwise OR of EditFlags */
}

/**
 * @brief Response to sr_set_item request.
 */
message SetItemResp {
}

/**
 * @brief Deletes the nodes under the specified path.
 * Sent by sr_delete_item API call.
 */
message DeleteItemReq {
  required string path = 1;
  required uint32 options = 3;  /**< Bitwise OR of EditFlags */
}

/**
 * @brief Response to sr_delete_item request.
 */
message DeleteItemResp {
}

/**
 * @brief Move the instance of an ordered list in specified direction.
 * Sent by sr_move_item API call.
 */
message MoveItemReq {
  enum MoveDirection {
    UP = 1;
    DOWN = 2;
  }
  required string path = 1;
  required MoveDirection direction = 2;
}

/**
 * @brief Response to sr_move_item request.
 */
message MoveItemResp {
}

/**
 * @brief Perform the validation of changes made in current session, but do not
 * commit nor discard them. Sent by sr_validate API call.
 */
message ValidateReq {
}

/**
 * @brief Response to sr_validate request.
 */
message ValidateResp {
  repeated Error errors = 1;
}

/**
 * @brief Apply changes made in current session.
 * Sent by sr_commit API call.
 */
message CommitReq {
}

/**
 * @brief Response to sr_commit request.
 */
message CommitResp {
  repeated Error errors = 1;
}

/**
 * @brief Discard non-committed changes made in current session.
 * Sent by sr_discard_changes API call.
 */
message DiscardChangesReq {
}

/**
 * @brief Response to sr_discard_changes request.
 */
message DiscardChangesResp {
}


////////////////////////////////////////////////////////////////////////////////
// Locking API - !!! EXPERIMENTAL !!!
////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Locks specified data model or the datastore which the session is tied to.
 * Sent by sr_lock_datastore and sr_lock_model API calls.
 */
message LockReq {
  optional string module_name = 1;  /**< If module name is not set, LockReq locks whole datastore. */
}

/**
 * @brief Response to sr_lock_datastore or sr_lock_model request.
 */
message LockResp {
}

/**
 * @brief Unlocks specified data model or the datastore which the session is tied to.
 * Sent by sr_unlock_datastore and sr_unlock_model API calls.
 */
message UnlockReq {
  optional string module_name = 1;  /**< If module name is not set, UnlockReq unlocks whole datastore. */
}

/**
 * @brief Response to sr_lock_datastore or sr_lock_model request.
 */
message UnlockResp {
}


////////////////////////////////////////////////////////////////////////////////
// Data modules handling API - !!! EXPERIMENTAL !!!
////////////////////////////////////////////////////////////////////////////////

message ModuleInstallReq {
  optional string module_name = 1;
  optional string revision = 2;
  required bool installed = 3;
}

message ModuleInstallResp {
}

message FeatureEnableReq {
  required string module_name = 1;
  required string feature_name = 2;
  required bool enabled = 3;
}

message FeatureEnableResp {
}


////////////////////////////////////////////////////////////////////////////////
// Sysrepo Engine API umbrella messages
////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Requested operation.
 */
enum Operation {
  SESSION_START = 10;
  SESSION_STOP = 11;
  SESSION_REFRESH = 12;

  LIST_SCHEMAS = 20;
  GET_SCHEMA = 21;
  MODULE_INSTALL = 22;
  FEATURE_ENABLE = 23;

  GET_ITEM = 30;
  GET_ITEMS = 31;

  SET_ITEM = 40;
  DELETE_ITEM = 41;
  MOVE_ITEM = 42;

  VALIDATE = 50;
  COMMIT = 51;
  DISCARD_CHANGES = 52;

  LOCK = 60;
  UNLOCK = 61;
}

/**
 * @brief Request for an operation.
 */
message Req {
  required Operation operation = 1;

  optional SessionStartReq session_start_req = 10;
  optional SessionStopReq session_stop_req = 11;
  optional SessionRefreshReq session_refresh_req = 12;

  optional ListSchemasReq list_schemas_req = 20;
  optional GetSchemaReq get_schema_req = 21;
  optional ModuleInstallReq module_install_req = 22;
  optional FeatureEnableReq feature_enable_req = 23;

  optional GetItemReq get_item_req = 30;
  optional GetItemsReq get_items_req = 31;

  optional SetItemReq set_item_req = 40;
  optional DeleteItemReq delete_item_req = 41;
  optional MoveItemReq move_item_req = 42;

  optional ValidateReq validate_req = 50;
  optional CommitReq commit_req = 51;
  optional DiscardChangesReq discard_changes_req = 52;

  optional LockReq lock_req = 60;
  optional UnlockReq unlock_req = 61;
}

/**
 * @brief Response to the received request.
 */
message Resp {
  required Operation operation = 1;
  required uint32 result = 2;  /**< Result of the operation. 0 on success, non-zero values map to sr_error_t enum in sysrepo.h. */
  optional Error error = 3;    /**< Additional error information. */

  optional SessionStartResp session_start_resp = 10;
  optional SessionStopResp session_stop_resp = 11;
  optional SessionRefreshResp session_refresh_resp = 12;

  optional ListSchemasResp list_schemas_resp = 20;
  optional GetSchemaResp get_schema_resp = 21;
  optional ModuleInstallResp module_install_resp = 22;
  optional FeatureEnableResp feature_enable_resp = 23;

  optional GetItemResp get_item_resp = 30;
  optional GetItemsResp get_items_resp = 31;

  optional SetItemResp set_item_resp = 40;
  optional DeleteItemResp delete_item_resp = 41;
  optional MoveItemResp move_item_resp = 42;

  optional ValidateResp validate_resp = 50;
  optional CommitResp commit_resp = 51;
  optional DiscardChangesResp discard_changes_resp = 52;

  optional LockResp lock_resp = 60;
  optional UnlockResp unlock_resp = 61;
}

/**
 * @brief Umbrella sysrepo message used for communication between sysrepo
 * engine and client library.
 */
message Msg {
  /**
   * @brief Type of the message.
   */
  enum MsgType {
    REQUEST = 1;   /**< The message is a request. */
    RESPONSE = 2;  /**< The message is a response to the request. */
  }

  required MsgType type = 1;       /**< Indicates type of the message. */
  required uint32 session_id = 2;  /**< Session identifier. Can be 0 (value is ignored) for session_start request. */
  optional Req request = 3;        /**< Filled in in case of type == REQUEST. */
  optional Resp response = 4;      /**< Filled in in case of type == RESPONSE. */
}
